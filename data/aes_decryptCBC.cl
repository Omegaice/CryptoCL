__constant uchar rcon[255] = {
	0x8d, 0x01, 0x02, 0x04, 0x08, 0x10, 0x20, 0x40, 0x80, 0x1b, 0x36, 0x6c, 0xd8, 0xab, 0x4d, 0x9a,
	0x2f, 0x5e, 0xbc, 0x63, 0xc6, 0x97, 0x35, 0x6a, 0xd4, 0xb3, 0x7d, 0xfa, 0xef, 0xc5, 0x91, 0x39,
	0x72, 0xe4, 0xd3, 0xbd, 0x61, 0xc2, 0x9f, 0x25, 0x4a, 0x94, 0x33, 0x66, 0xcc, 0x83, 0x1d, 0x3a,
	0x74, 0xe8, 0xcb, 0x8d, 0x01, 0x02, 0x04, 0x08, 0x10, 0x20, 0x40, 0x80, 0x1b, 0x36, 0x6c, 0xd8,
	0xab, 0x4d, 0x9a, 0x2f, 0x5e, 0xbc, 0x63, 0xc6, 0x97, 0x35, 0x6a, 0xd4, 0xb3, 0x7d, 0xfa, 0xef,
	0xc5, 0x91, 0x39, 0x72, 0xe4, 0xd3, 0xbd, 0x61, 0xc2, 0x9f, 0x25, 0x4a, 0x94, 0x33, 0x66, 0xcc,
	0x83, 0x1d, 0x3a, 0x74, 0xe8, 0xcb, 0x8d, 0x01, 0x02, 0x04, 0x08, 0x10, 0x20, 0x40, 0x80, 0x1b,
	0x36, 0x6c, 0xd8, 0xab, 0x4d, 0x9a, 0x2f, 0x5e, 0xbc, 0x63, 0xc6, 0x97, 0x35, 0x6a, 0xd4, 0xb3,
	0x7d, 0xfa, 0xef, 0xc5, 0x91, 0x39, 0x72, 0xe4, 0xd3, 0xbd, 0x61, 0xc2, 0x9f, 0x25, 0x4a, 0x94,
	0x33, 0x66, 0xcc, 0x83, 0x1d, 0x3a, 0x74, 0xe8, 0xcb, 0x8d, 0x01, 0x02, 0x04, 0x08, 0x10, 0x20,
	0x40, 0x80, 0x1b, 0x36, 0x6c, 0xd8, 0xab, 0x4d, 0x9a, 0x2f, 0x5e, 0xbc, 0x63, 0xc6, 0x97, 0x35,
	0x6a, 0xd4, 0xb3, 0x7d, 0xfa, 0xef, 0xc5, 0x91, 0x39, 0x72, 0xe4, 0xd3, 0xbd, 0x61, 0xc2, 0x9f,
	0x25, 0x4a, 0x94, 0x33, 0x66, 0xcc, 0x83, 0x1d, 0x3a, 0x74, 0xe8, 0xcb, 0x8d, 0x01, 0x02, 0x04,
	0x08, 0x10, 0x20, 0x40, 0x80, 0x1b, 0x36, 0x6c, 0xd8, 0xab, 0x4d, 0x9a, 0x2f, 0x5e, 0xbc, 0x63,
	0xc6, 0x97, 0x35, 0x6a, 0xd4, 0xb3, 0x7d, 0xfa, 0xef, 0xc5, 0x91, 0x39, 0x72, 0xe4, 0xd3, 0xbd,
	0x61, 0xc2, 0x9f, 0x25, 0x4a, 0x94, 0x33, 0x66, 0xcc, 0x83, 0x1d, 0x3a, 0x74, 0xe8, 0xcb  
};

__constant uchar InvSBox[256] = {
   0x52, 0x09, 0x6A, 0xD5, 0x30, 0x36, 0xA5, 0x38, 0xBF, 0x40, 0xA3, 0x9E, 0x81, 0xF3, 0xD7, 0xFB,
   0x7C, 0xE3, 0x39, 0x82, 0x9B, 0x2F, 0xFF, 0x87, 0x34, 0x8E, 0x43, 0x44, 0xC4, 0xDE, 0xE9, 0xCB,
   0x54, 0x7B, 0x94, 0x32, 0xA6, 0xC2, 0x23, 0x3D, 0xEE, 0x4C, 0x95, 0x0B, 0x42, 0xFA, 0xC3, 0x4E,
   0x08, 0x2E, 0xA1, 0x66, 0x28, 0xD9, 0x24, 0xB2, 0x76, 0x5B, 0xA2, 0x49, 0x6D, 0x8B, 0xD1, 0x25,
   0x72, 0xF8, 0xF6, 0x64, 0x86, 0x68, 0x98, 0x16, 0xD4, 0xA4, 0x5C, 0xCC, 0x5D, 0x65, 0xB6, 0x92,
   0x6C, 0x70, 0x48, 0x50, 0xFD, 0xED, 0xB9, 0xDA, 0x5E, 0x15, 0x46, 0x57, 0xA7, 0x8D, 0x9D, 0x84,
   0x90, 0xD8, 0xAB, 0x00, 0x8C, 0xBC, 0xD3, 0x0A, 0xF7, 0xE4, 0x58, 0x05, 0xB8, 0xB3, 0x45, 0x06,
   0xD0, 0x2C, 0x1E, 0x8F, 0xCA, 0x3F, 0x0F, 0x02, 0xC1, 0xAF, 0xBD, 0x03, 0x01, 0x13, 0x8A, 0x6B,
   0x3A, 0x91, 0x11, 0x41, 0x4F, 0x67, 0xDC, 0xEA, 0x97, 0xF2, 0xCF, 0xCE, 0xF0, 0xB4, 0xE6, 0x73,
   0x96, 0xAC, 0x74, 0x22, 0xE7, 0xAD, 0x35, 0x85, 0xE2, 0xF9, 0x37, 0xE8, 0x1C, 0x75, 0xDF, 0x6E,
   0x47, 0xF1, 0x1A, 0x71, 0x1D, 0x29, 0xC5, 0x89, 0x6F, 0xB7, 0x62, 0x0E, 0xAA, 0x18, 0xBE, 0x1B,
   0xFC, 0x56, 0x3E, 0x4B, 0xC6, 0xD2, 0x79, 0x20, 0x9A, 0xDB, 0xC0, 0xFE, 0x78, 0xCD, 0x5A, 0xF4,
   0x1F, 0xDD, 0xA8, 0x33, 0x88, 0x07, 0xC7, 0x31, 0xB1, 0x12, 0x10, 0x59, 0x27, 0x80, 0xEC, 0x5F,
   0x60, 0x51, 0x7F, 0xA9, 0x19, 0xB5, 0x4A, 0x0D, 0x2D, 0xE5, 0x7A, 0x9F, 0x93, 0xC9, 0x9C, 0xEF,
   0xA0, 0xE0, 0x3B, 0x4D, 0xAE, 0x2A, 0xF5, 0xB0, 0xC8, 0xEB, 0xBB, 0x3C, 0x83, 0x53, 0x99, 0x61,
   0x17, 0x2B, 0x04, 0x7E, 0xBA, 0x77, 0xD6, 0x26, 0xE1, 0x69, 0x14, 0x63, 0x55, 0x21, 0x0C, 0x7D
};

uchar gmul(uchar a, uchar b) {
	uchar p = 0;
	uchar hi_bit_set;
	for(uchar counter = 0; counter < 8; counter++) {
		if((b & 1) == 1) 
			p ^= a;
		hi_bit_set = (a & 0x80);
		a <<= 1;
		if(hi_bit_set == 0x80) 
			a ^= 0x1b;		
		b >>= 1;
	}
	return p;
}

__kernel void decryptCBCUnoptimized( __global const uchar *rkey, __global const uchar *data, __global const uchar *previous, __global uchar *result, const uint rounds ) {
	const uint idx = get_global_id( 0 );
	const uint startPos = 16 * idx;
	
	// Create Block
	uchar block[16];
	for( uint i = 0; i < 16; i++) block[i] = data[startPos+i];
	
	// Add Round Key
	for( uint i = 0; i < 16; i++ ) block[i] = block[i] ^ rkey[rounds*16+i];
		
	// Calculate Rounds
	for( uint j = rounds - 1; j > 0; j-- ){
		const uint jPos = j * 16;
		
		// Inverse Shift Rows
		uchar tempd[16];
		for( unsigned int i = 0; i < 16; i++ ) tempd[i] = block[i];
		
		for (unsigned int i = 0; i < 16; i++) {
			unsigned int k = (i - (i % 4 * 4)) % 16;
			block[i] = tempd[k];
		}
		
		// Inverse Sub Bytes
		for( uint i = 0; i < 16; i++ ) block[i] = InvSBox[block[i]];
	
		// Add Round Key
		for( uint i = 0; i < 16; i++ ) block[i] = block[i] ^ rkey[jPos+i];
		
		// Inverse Mix Columns
		for( uint col = 0; col < 4; col++ ){
			const uint colPos = col * 4;
			
			const uchar a = gmul(block[colPos+0],14) ^ gmul(block[colPos+3],9) ^ gmul(block[colPos+2],13) ^ gmul(block[colPos+1],11);
			const uchar b = gmul(block[colPos+1],14) ^ gmul(block[colPos+0],9) ^ gmul(block[colPos+3],13) ^ gmul(block[colPos+2],11);
			const uchar c = gmul(block[colPos+2],14) ^ gmul(block[colPos+1],9) ^ gmul(block[colPos+0],13) ^ gmul(block[colPos+3],11);
			const uchar d = gmul(block[colPos+3],14) ^ gmul(block[colPos+2],9) ^ gmul(block[colPos+1],13) ^ gmul(block[colPos+0],11);
			
			block[colPos+0] = a; block[colPos+1] = b; block[colPos+2] = c; block[colPos+3] = d;
		}
	}
	
	// Inverse Sub Bytes
	for( uint i = 0; i < 16; i++ ) block[i] = InvSBox[block[i]];
	
	// Inverse Shift Rows
	uchar temp[16];
	for( unsigned int i = 0; i < 16; i++ ) temp[i] = block[i];
	
	for (uint i = 0; i < 16; i++) {
		const uint k = (i - ( (i % 4) * 4)) % 16;
		block[i] = temp[k];
	}
	
	// Add Round Key
	for( uint i = 0; i < 16; i++ ) block[i] = block[i] ^ rkey[i];
	
	// XOR with previous
	for( uint i = 0; i < 16; i++ ) block[i] = block[i] ^ previous[startPos+i];
	
	// Copy Result
	for( uint i = 0; i < 16; i++ ) result[startPos+i] = block[i];
}

__kernel void decryptCBC( __global const uchar *rkey, __global const uchar *data, __global const uchar *previous, __global uchar *result, const uint rounds ) {
	const uint idx = get_global_id( 0 );
	const uint startPos = 16 * idx;
	
	// Create Block + Add Round Key
	uchar block[16];
	for( uint i = 0; i < 16; i++) block[i] = data[startPos+i] ^ rkey[rounds*16+i];
	
	// 
	for( uint i = 0; i < 16; i++ ) block[i] = block[i] ;
		
	// Calculate Rounds
	for( uint j = rounds - 1; j > 0; j-- ){
		const uint jPos = j * 16;
		
		// Inverse Shift Rows
		uchar tempd[16];
		for( unsigned int i = 0; i < 16; i++ ) tempd[i] = block[i];
		
		for (unsigned int i = 0; i < 16; i++) {
			unsigned int k = (i - (i % 4 * 4)) % 16;
			block[i] = tempd[k];
		}
	
		// Inverse Sub Bytes + Add Round Key
		for( uint i = 0; i < 16; i++ ) block[i] = InvSBox[block[i]] ^ rkey[jPos+i];
		
		// Inverse Mix Columns
		for( uint col = 0; col < 4; col++ ){
			const uint colPos = col * 4;
			
			const uchar a = gmul(block[colPos+0],14) ^ gmul(block[colPos+3],9) ^ gmul(block[colPos+2],13) ^ gmul(block[colPos+1],11);
			const uchar b = gmul(block[colPos+1],14) ^ gmul(block[colPos+0],9) ^ gmul(block[colPos+3],13) ^ gmul(block[colPos+2],11);
			const uchar c = gmul(block[colPos+2],14) ^ gmul(block[colPos+1],9) ^ gmul(block[colPos+0],13) ^ gmul(block[colPos+3],11);
			const uchar d = gmul(block[colPos+3],14) ^ gmul(block[colPos+2],9) ^ gmul(block[colPos+1],13) ^ gmul(block[colPos+0],11);
			
			block[colPos+0] = a; block[colPos+1] = b; block[colPos+2] = c; block[colPos+3] = d;
		}
	}
	
	// Inverse Sub Bytes + Inverse Shift Rows
	uchar temp[16];
	for( unsigned int i = 0; i < 16; i++ ) temp[i] = InvSBox[block[i]];
	
	for (uint i = 0; i < 16; i++) {
		const uint k = (i - ( (i % 4) * 4)) % 16;
		block[i] = temp[k];
	}
	
	// Add Round Key + XOR with previous + Copy Result
	for( uint i = 0; i < 16; i++ ) result[startPos+i] = block[i] ^ rkey[i] ^ previous[startPos+i];
}