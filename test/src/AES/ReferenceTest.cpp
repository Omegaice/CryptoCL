#include "AES/ReferenceTest.h"

#include <CryptoCL/Block/AES/RoundKey.h>
#include <CryptoCL/Block/AES/Reference.h>
#include <cppunit/extensions/HelperMacros.h>

CPPUNIT_TEST_SUITE_REGISTRATION( AES::ReferenceTest );

namespace AES {
	using namespace CryptoCL;
	using namespace CryptoCL::Block::AES;
	
	void AssertArray( const DataArray& expected, const DataArray& result ){
		CPPUNIT_ASSERT_EQUAL_MESSAGE( "Array Size Differs", (int)expected.size(), (int)result.size() );
	
		const unsigned int size = result.size();
		for( unsigned int i = 0; i < size; i++ ){
			std::ostringstream stream;
			stream << "Element " << i << " Differs";
			
			CPPUNIT_ASSERT_EQUAL_MESSAGE( stream.str(), (int)expected[i], (int)result[i] );
		}
	}
	
	// 128 Bit Tests
	void ReferenceTest::testEncryption128() {
		const unsigned char key[] = { 
			0x00,0x01,0x02,0x03,0x04,0x05,0x06,0x07,0x08,0x09,0x0a,0x0b,0x0c,0x0d,0x0e,0x0f
		};
		
		const unsigned char data[] = { 
			0x00,0x11,0x22,0x33,0x44,0x55,0x66,0x77,0x88,0x99,0xaa,0xbb,0xcc,0xdd,0xee,0xff 
		};
		
		const unsigned char expected[] = {
			0x69,0xc4,0xe0,0xd8,0x6a,0x7b,0x04,0x30,0xd8,0xcd,0xb7,0x80,0x70,0xb4,0xc5,0x5a
		};
		
		Reference cipher;
		cipher.Initialise( RoundKey( DataArray( key, key + 16 ) ) );
		
		const DataArray result = cipher.Encrypt( DataArray( data, data + 16 ) );
		
		AssertArray( DataArray( expected, expected + 16 ) , result );
	}
	
	void ReferenceTest::testEncryptionCBC128() {
		const unsigned char iv[] = {
			0x00,0x01,0x02,0x03,0x04,0x05,0x06,0x07,0x08,0x09,0x0A,0x0B,0x0C,0x0D,0x0E,0x0F
		};
		
		const unsigned char key[] = { 
			0x2b, 0x7e, 0x15, 0x16, 0x28, 0xae, 0xd2, 0xa6, 0xab, 0xf7, 0x15, 0x88, 0x09, 0xcf, 0x4f, 0x3c
		};
		
		const unsigned char data[] = { 
			0x94, 0x9f, 0x22, 0xbb, 0xe9, 0xaa, 0x15, 0xbc, 0x12, 0x4b, 0x3d, 0x71, 0xc3, 0xf2, 0xd9, 0xa1, 
			0x53, 0x4c, 0x8c, 0x4b, 0x7c, 0x10, 0x7c, 0x36, 0xf7, 0x28, 0xff, 0xc0, 0xee, 0x50, 0x63, 0xe5
		};
		
		const unsigned char expected[] = {
			0x7c, 0x39, 0xc9, 0x12, 0xb3, 0x8f, 0xef, 0x32, 0x49, 0x20, 0x1d, 0x93, 0xcf, 0x7f, 0xa9, 0xbe, 
			0x2e, 0x28, 0xd9, 0x9a, 0xfb, 0xfb, 0x36, 0x69, 0x68, 0xf3, 0x0b, 0xa0, 0x18, 0xed, 0x48, 0x59
		};
		
		Reference cipher( Block::Mode::CipherBlockChaining, DataArray( iv, iv + 16 ) );
		cipher.Initialise( RoundKey( DataArray( key, key + 16 ) ) );
		
		const DataArray result = cipher.Encrypt( DataArray( data, data + 32 ) );
		
		AssertArray( DataArray( expected, expected + 32 ) , result );
	}
	
	void ReferenceTest::testDecryption128() {
		const unsigned char key[] = { 
			0x00,0x01,0x02,0x03,0x04,0x05,0x06,0x07,0x08,0x09,0x0a,0x0b,0x0c,0x0d,0x0e,0x0f
		};
		
		const unsigned char data[] = {
			0x69,0xc4,0xe0,0xd8,0x6a,0x7b,0x04,0x30,0xd8,0xcd,0xb7,0x80,0x70,0xb4,0xc5,0x5a
		};
		
		const unsigned char expected[] = { 
			0x00,0x11,0x22,0x33,0x44,0x55,0x66,0x77,0x88,0x99,0xaa,0xbb,0xcc,0xdd,0xee,0xff 
		};
		
		Reference cipher;
		cipher.Initialise( RoundKey( DataArray( key, key + 16 ) ) );
		
		const DataArray result = cipher.Decrypt( DataArray( data, data + 16 ) );
		
		AssertArray( DataArray( expected, expected + 16 ) , result );
	}
	
	void ReferenceTest::testDecryptionCBC128() {
		const unsigned char iv[] = {
			0x00,0x01,0x02,0x03,0x04,0x05,0x06,0x07,0x08,0x09,0x0A,0x0B,0x0C,0x0D,0x0E,0x0F
		};
		
		const unsigned char key[] = { 
			0x2b,0x7e,0x15,0x16,0x28,0xae,0xd2,0xa6,0xab,0xf7,0x15,0x88,0x09,0xcf,0x4f,0x3c
		};
		
		const unsigned char data[] = {
			0x7c, 0x39, 0xc9, 0x12, 0xb3, 0x8f, 0xef, 0x32, 0x49, 0x20, 0x1d, 0x93, 0xcf, 0x7f, 0xa9, 0xbe, 
			0x2e, 0x28, 0xd9, 0x9a, 0xfb, 0xfb, 0x36, 0x69, 0x68, 0xf3, 0x0b, 0xa0, 0x18, 0xed, 0x48, 0x59
		};
		
		const unsigned char expected[] = { 
			0x94, 0x9f, 0x22, 0xbb, 0xe9, 0xaa, 0x15, 0xbc, 0x12, 0x4b, 0x3d, 0x71, 0xc3, 0xf2, 0xd9, 0xa1, 
			0x53, 0x4c, 0x8c, 0x4b, 0x7c, 0x10, 0x7c, 0x36, 0xf7, 0x28, 0xff, 0xc0, 0xee, 0x50, 0x63, 0xe5
		};
		
		Reference cipher( Block::Mode::CipherBlockChaining, DataArray( iv, iv + 16 ) );
		cipher.Initialise( RoundKey( DataArray( key, key + 16 ) ) );
		
		const DataArray result = cipher.Decrypt( DataArray( data, data + 32 ) );
		
		AssertArray( DataArray( expected, expected + 32 ) , result );
	}
	
	// 192 Bit Tests
	void ReferenceTest::testEncryption192() {
		const unsigned char key[] = { 
			0x00,0x01,0x02,0x03,0x04,0x05,0x06,0x07,0x08,0x09,0x0a,0x0b,0x0c,0x0d,0x0e,0x0f,
			0x10,0x11,0x12,0x13,0x14,0x15,0x16,0x17
		};
		
		const unsigned char data[] = { 
			0x00,0x11,0x22,0x33,0x44,0x55,0x66,0x77,0x88,0x99,0xaa,0xbb,0xcc,0xdd,0xee,0xff 
		};
		
		const unsigned char expected[] = {
			0xdd,0xa9,0x7c,0xa4,0x86,0x4c,0xdf,0xe0,0x6e,0xaf,0x70,0xa0,0xec,0x0d,0x71,0x91 
		};
		
		Reference cipher;
		cipher.Initialise( RoundKey( DataArray( key, key + 24 ) ) );
		
		const DataArray result = cipher.Encrypt( DataArray( data, data + 16 ) );
		
		AssertArray( DataArray( expected, expected + 16 ) , result );
	}
	
	void ReferenceTest::testEncryptionCBC192() {
		const unsigned char iv[] = {
			0x00,0x01,0x02,0x03,0x04,0x05,0x06,0x07,0x08,0x09,0x0A,0x0B,0x0C,0x0D,0x0E,0x0F
		};
		
		const unsigned char key[] = { 
			0x8e,0x73,0xb0,0xf7,0xda,0x0e,0x64,0x52,0xc8,0x10,0xf3,0x2b,0x80,0x90,0x79,0xe5,0x62,0xf8,0xea,0xd2,0x52,0x2c,0x6b,0x7b
		};
		
		const unsigned char data[] = { 
			0xd6, 0x4c, 0x05, 0xcb, 0xcf, 0xe8, 0xd3, 0xcb, 0x8e, 0x1e, 0x40, 0x39, 0xe9, 0xca, 0xd7, 0xad, 
			0xd3, 0x36, 0xf5, 0x81, 0xdf, 0x91, 0xd9, 0xe2, 0xe5, 0x75, 0x30, 0x57, 0xf7, 0xf0, 0xae, 0xea
		};
		
		const unsigned char expected[] = {
			0x4b, 0x06, 0x97, 0xf0, 0xa4, 0x0e, 0x41, 0x2d, 0xa9, 0x73, 0xbc, 0x7f, 0x53, 0x31, 0x51, 0x95, 
			0xbb, 0x36, 0xd9, 0x8d, 0xe7, 0x95, 0x19, 0xd8, 0xdb, 0x84, 0x69, 0xce, 0xa5, 0x34, 0xc1, 0xa8
		};
		
		Reference cipher( Block::Mode::CipherBlockChaining, DataArray( iv, iv + 16 ) );
		cipher.Initialise( RoundKey( DataArray( key, key + 24 ) ) );
		
		const DataArray result = cipher.Encrypt( DataArray( data, data + 32 ) );
		
		AssertArray( DataArray( expected, expected + 32 ) , result );
	}
	
	void ReferenceTest::testDecryption192() {
		const unsigned char key[] = { 
			0x00,0x01,0x02,0x03,0x04,0x05,0x06,0x07,0x08,0x09,0x0a,0x0b,0x0c,0x0d,0x0e,0x0f,
			0x10,0x11,0x12,0x13,0x14,0x15,0x16,0x17 
		};
		
		const unsigned char data[] = {
			0xdd,0xa9,0x7c,0xa4,0x86,0x4c,0xdf,0xe0,0x6e,0xaf,0x70,0xa0,0xec,0x0d,0x71,0x91
		};
		
		const unsigned char expected[] = { 
			0x00,0x11,0x22,0x33,0x44,0x55,0x66,0x77,0x88,0x99,0xaa,0xbb,0xcc,0xdd,0xee,0xff 
		};
		
		Reference cipher;
		cipher.Initialise( RoundKey( DataArray( key, key + 24 ) ) );
		
		const DataArray result = cipher.Decrypt( DataArray( data, data + 16 ) );
		
		AssertArray( DataArray( expected, expected + 16 ) , result );
	}
	
	void ReferenceTest::testDecryptionCBC192() {
		const unsigned char iv[] = {
			0x00,0x01,0x02,0x03,0x04,0x05,0x06,0x07,0x08,0x09,0x0A,0x0B,0x0C,0x0D,0x0E,0x0F
		};
		
		const unsigned char key[] = { 
			0x8e,0x73,0xb0,0xf7,0xda,0x0e,0x64,0x52,0xc8,0x10,0xf3,0x2b,0x80,0x90,0x79,0xe5,0x62,0xf8,0xea,0xd2,0x52,0x2c,0x6b,0x7b
		};
		
		const unsigned char data[] = {
			0x4b, 0x06, 0x97, 0xf0, 0xa4, 0x0e, 0x41, 0x2d, 0xa9, 0x73, 0xbc, 0x7f, 0x53, 0x31, 0x51, 0x95, 
			0xbb, 0x36, 0xd9, 0x8d, 0xe7, 0x95, 0x19, 0xd8, 0xdb, 0x84, 0x69, 0xce, 0xa5, 0x34, 0xc1, 0xa8
		};
		
		const unsigned char expected[] = { 
			0xd6, 0x4c, 0x05, 0xcb, 0xcf, 0xe8, 0xd3, 0xcb, 0x8e, 0x1e, 0x40, 0x39, 0xe9, 0xca, 0xd7, 0xad, 
			0xd3, 0x36, 0xf5, 0x81, 0xdf, 0x91, 0xd9, 0xe2, 0xe5, 0x75, 0x30, 0x57, 0xf7, 0xf0, 0xae, 0xea
		};
		
		Reference cipher( Block::Mode::CipherBlockChaining, DataArray( iv, iv + 16 ) );
		cipher.Initialise( RoundKey( DataArray( key, key + 24 ) ) );
		
		const DataArray result = cipher.Decrypt( DataArray( data, data + 32 ) );
		
		AssertArray( DataArray( expected, expected + 32 ) , result );
	}
	
	// 256 Bit Tests
	void ReferenceTest::testEncryption256() {
		const unsigned char key[] = { 
			0x00,0x01,0x02,0x03,0x04,0x05,0x06,0x07,0x08,0x09,0x0a,0x0b,0x0c,0x0d,0x0e,0x0f,
			0x10,0x11,0x12,0x13,0x14,0x15,0x16,0x17,0x18,0x19,0x1a,0x1b,0x1c,0x1d,0x1e,0x1f 
		};
		
		const unsigned char data[] = { 
			0x00,0x11,0x22,0x33,0x44,0x55,0x66,0x77,0x88,0x99,0xaa,0xbb,0xcc,0xdd,0xee,0xff 
		};
		
		const unsigned char expected[] = {
			0x8e,0xa2,0xb7,0xca,0x51,0x67,0x45,0xbf,0xea,0xfc,0x49,0x90,0x4b,0x49,0x60,0x89 
		};
		
		Reference cipher;
		cipher.Initialise( RoundKey( DataArray( key, key + 32 ) ) );
		
		const DataArray result = cipher.Encrypt( DataArray( data, data + 16 ) );
		
		AssertArray( DataArray( expected, expected + 16 ) , result );
	}
	
	void ReferenceTest::testEncryptionCBC256() {
		const unsigned char iv[] = {
			0x00,0x01,0x02,0x03,0x04,0x05,0x06,0x07,0x08,0x09,0x0A,0x0B,0x0C,0x0D,0x0E,0x0F
		};
		
		const unsigned char key[] = { 
			0x60,0x3d,0xeb,0x10,0x15,0xca,0x71,0xbe,0x2b,0x73,0xae,0xf0,0x85,0x7d,0x77,0x81,
			0x1f,0x35,0x2c,0x07,0x3b,0x61,0x08,0xd7,0x2d,0x98,0x10,0xa3,0x09,0x14,0xdf,0xf4
		};
		
		const unsigned char data[] = { 
			0x08, 0x0b, 0xe1, 0xe0, 0xaa, 0x30, 0x3e, 0x6d, 0xb6, 0xb0, 0x9a, 0xe9, 0x54, 0x4c, 0x31, 0x3c, 
			0xd3, 0x85, 0x8a, 0xa1, 0x72, 0x6f, 0x44, 0x8e, 0x36, 0x00, 0xd1, 0xd9, 0xb9, 0xb8, 0x0f, 0xec
		};
		
		const unsigned char expected[] = {
			0xb8, 0x3e, 0xd7, 0xb3, 0x82, 0x8a, 0xc0, 0x5e, 0x3e, 0xa2, 0x52, 0x45, 0x27, 0x34, 0x4c, 0x97, 
			0x87, 0xad, 0xc9, 0x09, 0x69, 0x12, 0xf4, 0xea, 0x70, 0xa7, 0x45, 0xd0, 0xd8, 0xf7, 0x37, 0x56
		};
		
		Reference cipher( Block::Mode::CipherBlockChaining, DataArray( iv, iv + 16 ) );
		cipher.Initialise( RoundKey( DataArray( key, key + 32 ) ) );
		
		const DataArray result = cipher.Encrypt( DataArray( data, data + 32 ) );
		
		AssertArray( DataArray( expected, expected + 32 ) , result );
	}
	
	void ReferenceTest::testDecryption256() {
		const unsigned char key[] = { 
			0x00,0x01,0x02,0x03,0x04,0x05,0x06,0x07,0x08,0x09,0x0a,0x0b,0x0c,0x0d,0x0e,0x0f,
			0x10,0x11,0x12,0x13,0x14,0x15,0x16,0x17,0x18,0x19,0x1a,0x1b,0x1c,0x1d,0x1e,0x1f 
		};
		
		const unsigned char data[] = {
			0x8e,0xa2,0xb7,0xca,0x51,0x67,0x45,0xbf,0xea,0xfc,0x49,0x90,0x4b,0x49,0x60,0x89 
		};
		
		const unsigned char expected[] = { 
			0x00,0x11,0x22,0x33,0x44,0x55,0x66,0x77,0x88,0x99,0xaa,0xbb,0xcc,0xdd,0xee,0xff 
		};
		
		Reference cipher;
		cipher.Initialise( RoundKey( DataArray( key, key + 32 ) ) );
		
		const DataArray result = cipher.Decrypt( DataArray( data, data + 16 ) );
		
		AssertArray( DataArray( expected, expected + 16 ) , result );
	}
	
	void ReferenceTest::testDecryptionCBC256() {
		const unsigned char iv[] = {
			0x00,0x01,0x02,0x03,0x04,0x05,0x06,0x07,0x08,0x09,0x0A,0x0B,0x0C,0x0D,0x0E,0x0F
		};
		
		const unsigned char key[] = { 
			0x60,0x3d,0xeb,0x10,0x15,0xca,0x71,0xbe,0x2b,0x73,0xae,0xf0,0x85,0x7d,0x77,0x81,
			0x1f,0x35,0x2c,0x07,0x3b,0x61,0x08,0xd7,0x2d,0x98,0x10,0xa3,0x09,0x14,0xdf,0xf4
		};
		
		const unsigned char data[] = {
			0xb8, 0x3e, 0xd7, 0xb3, 0x82, 0x8a, 0xc0, 0x5e, 0x3e, 0xa2, 0x52, 0x45, 0x27, 0x34, 0x4c, 0x97, 
			0x87, 0xad, 0xc9, 0x09, 0x69, 0x12, 0xf4, 0xea, 0x70, 0xa7, 0x45, 0xd0, 0xd8, 0xf7, 0x37, 0x56
		};
		
		const unsigned char expected[] = { 
			0x08, 0x0b, 0xe1, 0xe0, 0xaa, 0x30, 0x3e, 0x6d, 0xb6, 0xb0, 0x9a, 0xe9, 0x54, 0x4c, 0x31, 0x3c, 
			0xd3, 0x85, 0x8a, 0xa1, 0x72, 0x6f, 0x44, 0x8e, 0x36, 0x00, 0xd1, 0xd9, 0xb9, 0xb8, 0x0f, 0xec
		};
		
		Reference cipher( Block::Mode::CipherBlockChaining, DataArray( iv, iv + 16 ) );
		cipher.Initialise( RoundKey( DataArray( key, key + 32 ) ) );
		
		const DataArray result = cipher.Decrypt( DataArray( data, data + 32 ) );
		
		AssertArray( DataArray( expected, expected + 32 ) , result );
	}
}
